üß† Final IntelliJ-Ready Prompt

I‚Äôm building a Ktor backend that handles media uploads from mobile clients (Android & iOS).
Please generate complete runnable Kotlin code for a Ktor server that:
	‚Ä¢	‚úÖ Supports all common image types (jpg, jpeg, png, gif, webp, heic, etc.)
	‚Ä¢	‚úÖ Supports video types (mp4, mov, avi, mkv, webm, etc.)
	‚Ä¢	‚úÖ Lets users optionally specify a name for their upload (e.g. ‚ÄúVacation Photos‚Äù)
	‚Ä¢	‚úÖ Allows uploading multiple files at once using multipart/form-data
	‚Ä¢	‚úÖ Works smoothly for mobile clients (Android & iOS) using HTTP POST requests
	‚Ä¢	‚úÖ Can handle 50‚Äì100 concurrent users uploading at the same time
	‚Ä¢	‚úÖ Saves files to a local folder (e.g. /uploads) organized by user name + timestamp
	‚Ä¢	‚úÖ Includes a GET /export endpoint that zips and returns all uploaded files

‚∏ª

Requirements:
	1.	Use Ktor (latest stable version) as the backend framework.
	2.	Include all necessary dependencies in build.gradle.kts ‚Äî such as:
	‚Ä¢	ktor-server-core
	‚Ä¢	ktor-server-netty
	‚Ä¢	ktor-server-content-negotiation
	‚Ä¢	ktor-server-cors
	‚Ä¢	ktor-server-metrics
	‚Ä¢	ktor-server-call-logging
	‚Ä¢	ktor-server-compression
	‚Ä¢	ktor-server-auto-head-response
	‚Ä¢	ktor-server-partial-content
	‚Ä¢	ktor-server-status-pages
	‚Ä¢	ktor-server-auth
	‚Ä¢	ktor-server-sessions
	‚Ä¢	ktor-server-rate-limit (optional for durability)
	‚Ä¢	ktor-server-mustache (optional for templates)
	‚Ä¢	kotlinx-coroutines-core
	‚Ä¢	and any others required for multipart upload & zipping files
	3.	Provide a minimal application.conf and Main.kt entry point.
	4.	Implement an upload route:

post("/upload") { ... }

that:
	‚Ä¢	Parses multipart form data
	‚Ä¢	Validates MIME types and file size
	‚Ä¢	Saves files asynchronously to /uploads/{optionalName}/{timestamp}/filename.ext
	‚Ä¢	Returns a JSON response listing uploaded file paths

	5.	Implement a /export endpoint that zips all files and serves them as a download.
	6.	Explain (in code comments) how to tune performance for 50‚Äì100 concurrent users
(coroutines, async file streaming, etc.).
	7.	Provide short sample code for:
	‚Ä¢	An Android client (using Ktor Client) that uploads multiple images/videos
	‚Ä¢	An iOS client (Swift + URLSession) doing the same
	8.	Ensure the generated code is ready to run in IntelliJ IDEA ‚Äî
i.e. the project should compile and start with ./gradlew run.

‚∏ª

Output everything as a complete Ktor project structure:

build.gradle.kts
resources/application.conf
src/main/kotlin/Application.kt
src/main/kotlin/routes/UploadRoutes.kt
src/main/kotlin/utils/FileUtils.kt
(plus any helper classes you think are needed)

Add concise comments throughout explaining design choices and good practices for production readiness.